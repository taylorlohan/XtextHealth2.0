/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.myhealth.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.myhealth.health.AdviceStatement;
import org.xtext.example.myhealth.health.AgeStatement;
import org.xtext.example.myhealth.health.ExerciseStatement;
import org.xtext.example.myhealth.health.GenderStatement;
import org.xtext.example.myhealth.health.HealthPackage;
import org.xtext.example.myhealth.health.HealthProgram;
import org.xtext.example.myhealth.health.HeightStatement;
import org.xtext.example.myhealth.health.IngestStatement;
import org.xtext.example.myhealth.health.IntValue;
import org.xtext.example.myhealth.health.PeopleStatement;
import org.xtext.example.myhealth.health.RealValue;
import org.xtext.example.myhealth.health.WeightStatement;
import org.xtext.example.myhealth.services.HealthGrammarAccess;

@SuppressWarnings("all")
public class HealthSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HealthGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HealthPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HealthPackage.ADVICE_STATEMENT:
				sequence_AdviceStatement(context, (AdviceStatement) semanticObject); 
				return; 
			case HealthPackage.AGE_STATEMENT:
				sequence_AgeStatement(context, (AgeStatement) semanticObject); 
				return; 
			case HealthPackage.EXERCISE_STATEMENT:
				sequence_ExerciseStatement(context, (ExerciseStatement) semanticObject); 
				return; 
			case HealthPackage.GENDER_STATEMENT:
				sequence_GenderStatement(context, (GenderStatement) semanticObject); 
				return; 
			case HealthPackage.HEALTH_PROGRAM:
				sequence_HealthProgram(context, (HealthProgram) semanticObject); 
				return; 
			case HealthPackage.HEIGHT_STATEMENT:
				sequence_HeightStatement(context, (HeightStatement) semanticObject); 
				return; 
			case HealthPackage.INGEST_STATEMENT:
				sequence_IngestStatement(context, (IngestStatement) semanticObject); 
				return; 
			case HealthPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case HealthPackage.PEOPLE_STATEMENT:
				sequence_PeopleStatement(context, (PeopleStatement) semanticObject); 
				return; 
			case HealthPackage.REAL_VALUE:
				sequence_RealValue(context, (RealValue) semanticObject); 
				return; 
			case HealthPackage.WEIGHT_STATEMENT:
				sequence_WeightStatement(context, (WeightStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns AdviceStatement
	 *     AdviceStatement returns AdviceStatement
	 *
	 * Constraint:
	 *     ad=AdviceType
	 */
	protected void sequence_AdviceStatement(ISerializationContext context, AdviceStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.ADVICE_STATEMENT__AD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.ADVICE_STATEMENT__AD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdviceStatementAccess().getAdAdviceTypeEnumRuleCall_4_0(), semanticObject.getAd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns AgeStatement
	 *     AgeStatement returns AgeStatement
	 *
	 * Constraint:
	 *     age=InputValue
	 */
	protected void sequence_AgeStatement(ISerializationContext context, AgeStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.AGE_STATEMENT__AGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.AGE_STATEMENT__AGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgeStatementAccess().getAgeInputValueParserRuleCall_3_0(), semanticObject.getAge());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ExerciseStatement
	 *     ExerciseStatement returns ExerciseStatement
	 *
	 * Constraint:
	 *     (ExerciseType=ExerciseType time=InputValue)
	 */
	protected void sequence_ExerciseStatement(ISerializationContext context, ExerciseStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.EXERCISE_STATEMENT__EXERCISE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.EXERCISE_STATEMENT__EXERCISE_TYPE));
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.EXERCISE_STATEMENT__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.EXERCISE_STATEMENT__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExerciseStatementAccess().getExerciseTypeExerciseTypeEnumRuleCall_1_0(), semanticObject.getExerciseType());
		feeder.accept(grammarAccess.getExerciseStatementAccess().getTimeInputValueParserRuleCall_3_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns GenderStatement
	 *     GenderStatement returns GenderStatement
	 *
	 * Constraint:
	 *     gender=Gender
	 */
	protected void sequence_GenderStatement(ISerializationContext context, GenderStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.GENDER_STATEMENT__GENDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.GENDER_STATEMENT__GENDER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGenderStatementAccess().getGenderGenderEnumRuleCall_3_0(), semanticObject.getGender());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HealthProgram returns HealthProgram
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_HealthProgram(ISerializationContext context, HealthProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns HeightStatement
	 *     HeightStatement returns HeightStatement
	 *
	 * Constraint:
	 *     height=InputValue
	 */
	protected void sequence_HeightStatement(ISerializationContext context, HeightStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.HEIGHT_STATEMENT__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.HEIGHT_STATEMENT__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeightStatementAccess().getHeightInputValueParserRuleCall_3_0(), semanticObject.getHeight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IngestStatement
	 *     IngestStatement returns IngestStatement
	 *
	 * Constraint:
	 *     (nutritiontype=nutrition amount=InputValue)
	 */
	protected void sequence_IngestStatement(ISerializationContext context, IngestStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.INGEST_STATEMENT__NUTRITIONTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.INGEST_STATEMENT__NUTRITIONTYPE));
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.INGEST_STATEMENT__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.INGEST_STATEMENT__AMOUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIngestStatementAccess().getNutritiontypeNutritionEnumRuleCall_2_0(), semanticObject.getNutritiontype());
		feeder.accept(grammarAccess.getIngestStatementAccess().getAmountInputValueParserRuleCall_3_0(), semanticObject.getAmount());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputValue returns IntValue
	 *     IntValue returns IntValue
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.INT_VALUE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.INT_VALUE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns PeopleStatement
	 *     PeopleStatement returns PeopleStatement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PeopleStatement(ISerializationContext context, PeopleStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.PEOPLE_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.PEOPLE_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPeopleStatementAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputValue returns RealValue
	 *     RealValue returns RealValue
	 *
	 * Constraint:
	 *     val=REAL
	 */
	protected void sequence_RealValue(ISerializationContext context, RealValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.REAL_VALUE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.REAL_VALUE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealValueAccess().getValREALParserRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns WeightStatement
	 *     WeightStatement returns WeightStatement
	 *
	 * Constraint:
	 *     weight=InputValue
	 */
	protected void sequence_WeightStatement(ISerializationContext context, WeightStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HealthPackage.Literals.WEIGHT_STATEMENT__WEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HealthPackage.Literals.WEIGHT_STATEMENT__WEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWeightStatementAccess().getWeightInputValueParserRuleCall_3_0(), semanticObject.getWeight());
		feeder.finish();
	}
	
	
}
