/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.myhealth.health.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.myhealth.health.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HealthFactoryImpl extends EFactoryImpl implements HealthFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HealthFactory init()
  {
    try
    {
      HealthFactory theHealthFactory = (HealthFactory)EPackage.Registry.INSTANCE.getEFactory(HealthPackage.eNS_URI);
      if (theHealthFactory != null)
      {
        return theHealthFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HealthFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HealthFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HealthPackage.HEALTH_PROGRAM: return createHealthProgram();
      case HealthPackage.STATEMENT: return createStatement();
      case HealthPackage.PEOPLE_STATEMENT: return createPeopleStatement();
      case HealthPackage.HEIGHT_STATEMENT: return createHeightStatement();
      case HealthPackage.WEIGHT_STATEMENT: return createWeightStatement();
      case HealthPackage.AGE_STATEMENT: return createAgeStatement();
      case HealthPackage.GENDER_STATEMENT: return createGenderStatement();
      case HealthPackage.INGEST_STATEMENT: return createIngestStatement();
      case HealthPackage.EXERCISE_STATEMENT: return createExerciseStatement();
      case HealthPackage.ADVICE_STATEMENT: return createAdviceStatement();
      case HealthPackage.INPUT_VALUE: return createInputValue();
      case HealthPackage.INT_VALUE: return createIntValue();
      case HealthPackage.REAL_VALUE: return createRealValue();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case HealthPackage.GENDER:
        return createGenderFromString(eDataType, initialValue);
      case HealthPackage.NUTRITION:
        return createnutritionFromString(eDataType, initialValue);
      case HealthPackage.ADVICE_TYPE:
        return createAdviceTypeFromString(eDataType, initialValue);
      case HealthPackage.EXERCISE_TYPE:
        return createExerciseTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case HealthPackage.GENDER:
        return convertGenderToString(eDataType, instanceValue);
      case HealthPackage.NUTRITION:
        return convertnutritionToString(eDataType, instanceValue);
      case HealthPackage.ADVICE_TYPE:
        return convertAdviceTypeToString(eDataType, instanceValue);
      case HealthPackage.EXERCISE_TYPE:
        return convertExerciseTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HealthProgram createHealthProgram()
  {
    HealthProgramImpl healthProgram = new HealthProgramImpl();
    return healthProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeopleStatement createPeopleStatement()
  {
    PeopleStatementImpl peopleStatement = new PeopleStatementImpl();
    return peopleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HeightStatement createHeightStatement()
  {
    HeightStatementImpl heightStatement = new HeightStatementImpl();
    return heightStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WeightStatement createWeightStatement()
  {
    WeightStatementImpl weightStatement = new WeightStatementImpl();
    return weightStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgeStatement createAgeStatement()
  {
    AgeStatementImpl ageStatement = new AgeStatementImpl();
    return ageStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenderStatement createGenderStatement()
  {
    GenderStatementImpl genderStatement = new GenderStatementImpl();
    return genderStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IngestStatement createIngestStatement()
  {
    IngestStatementImpl ingestStatement = new IngestStatementImpl();
    return ingestStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExerciseStatement createExerciseStatement()
  {
    ExerciseStatementImpl exerciseStatement = new ExerciseStatementImpl();
    return exerciseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdviceStatement createAdviceStatement()
  {
    AdviceStatementImpl adviceStatement = new AdviceStatementImpl();
    return adviceStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputValue createInputValue()
  {
    InputValueImpl inputValue = new InputValueImpl();
    return inputValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntValue createIntValue()
  {
    IntValueImpl intValue = new IntValueImpl();
    return intValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealValue createRealValue()
  {
    RealValueImpl realValue = new RealValueImpl();
    return realValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gender createGenderFromString(EDataType eDataType, String initialValue)
  {
    Gender result = Gender.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertGenderToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public nutrition createnutritionFromString(EDataType eDataType, String initialValue)
  {
    nutrition result = nutrition.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertnutritionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AdviceType createAdviceTypeFromString(EDataType eDataType, String initialValue)
  {
    AdviceType result = AdviceType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAdviceTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExerciseType createExerciseTypeFromString(EDataType eDataType, String initialValue)
  {
    ExerciseType result = ExerciseType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExerciseTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HealthPackage getHealthPackage()
  {
    return (HealthPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HealthPackage getPackage()
  {
    return HealthPackage.eINSTANCE;
  }

} //HealthFactoryImpl
