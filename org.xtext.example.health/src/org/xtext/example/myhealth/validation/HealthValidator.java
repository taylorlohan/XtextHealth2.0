/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.myhealth.validation;

import org.eclipse.xtext.validation.Check;
import org.xtext.example.health.typing.validation.HealthTypeSystemValidator;
import org.xtext.example.myhealth.health.AgeStatement;
import org.xtext.example.myhealth.health.ExerciseStatement;
import org.xtext.example.myhealth.health.HealthPackage;
import org.xtext.example.myhealth.health.HeightStatement;
import org.xtext.example.myhealth.health.IntValue;
import org.xtext.example.myhealth.health.PeopleStatement;
import org.xtext.example.myhealth.health.RealValue;
import org.xtext.example.myhealth.health.WeightStatement;
/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class HealthValidator extends HealthTypeSystemValidator {
	
	public static final String INVALID_NAME= "invalidName";
	public static final String INVALID_HEIGHT= "invalidHeight";
	public static final String INVALID_WEIGHT= "invalidWeight";
	public static final String INVALID_AGE= "invalidAge";
	public static final String INVALID_TIME= "invalidTime";
	@Check
	public void checkNameStartsWithCapital(PeopleStatement name) {
		if (!Character.isUpperCase(name.getName().charAt(0))) {
			warning("Name should start with a capital",
					HealthPackage.Literals.PEOPLE_STATEMENT__NAME,
					INVALID_NAME);
		}
	}
	
	
	@Check
	 public void checkheightvalid(HeightStatement height) {
		
		if( height.getHeight() instanceof IntValue){
		    IntValue intVal = (IntValue) height.getHeight();
		    if(intVal.getVal()>250||intVal.getVal()<130) {
		    	 warning("the value of height is invalid",height,
		    		     HealthPackage.Literals.HEIGHT_STATEMENT__HEIGHT,
		    		     INVALID_HEIGHT);
		    }

		} else if ( height.getHeight() instanceof RealValue){
		    RealValue realVal = (RealValue) height.getHeight();
		    if(realVal.getVal()>250.0||realVal.getVal()<130.0) {
		    	 warning("the value of height is invalid",height,
		    		     HealthPackage.Literals.HEIGHT_STATEMENT__HEIGHT,
		    		     INVALID_HEIGHT);
		    }
		}
		
	
	 }
	@Check
	 public void checkweightvalid(WeightStatement weight) {
		
	 
		if( weight.getWeight() instanceof IntValue){
		    IntValue intVal = (IntValue) weight.getWeight();
		    if(intVal.getVal()>200||intVal.getVal()<30) {
		    	 warning("the value of weight is invalid",weight,
		    		     HealthPackage.Literals.WEIGHT_STATEMENT__WEIGHT,
		    		     INVALID_WEIGHT);
		    }

		} else if ( weight.getWeight() instanceof RealValue){
		    RealValue realVal = (RealValue) weight.getWeight();
		    if(realVal.getVal()>200.0||realVal.getVal()<30.0) {
		    	 warning("the value of weight is invalid",weight,
		    		     HealthPackage.Literals.WEIGHT_STATEMENT__WEIGHT,
		    		     INVALID_WEIGHT);
		    }
		}
	 }
	@Check
	 public void checkagevalid(AgeStatement age) {
		if( age.getAge() instanceof IntValue){
		    IntValue intVal = (IntValue) age.getAge();
		    if(intVal.getVal()>100||intVal.getVal()<0) {
		    	 warning("the value of age is invalid",age,
		    		     HealthPackage.Literals.AGE_STATEMENT__AGE,
		    		     INVALID_AGE);
		    }

		} else if ( age.getAge() instanceof RealValue){
		    RealValue realVal = (RealValue) age.getAge();
		    if(realVal.getVal()>100.0||realVal.getVal()<0.0) {
		    	 warning("the value of age is invalid",age,
		    		     HealthPackage.Literals.AGE_STATEMENT__AGE,
		    		     INVALID_AGE);
		    }
		}
	 }
	
	
	@Check
	public void checkTime(ExerciseStatement time) {
		if( time.getTime() instanceof IntValue){
		    IntValue intVal = (IntValue) time.getTime();
		    if(intVal.getVal()>24||intVal.getVal()<0) {
		    	 warning("the value of time is invalid",time,
		    		     HealthPackage.Literals.EXERCISE_STATEMENT__TIME,
		    		     INVALID_TIME);
		    }

		} else if ( time.getTime() instanceof RealValue){
		    RealValue realVal = (RealValue) time.getTime();
		    if(realVal.getVal()>24.0||realVal.getVal()<0.0) {
		    	 warning("the value of time is invalid",time,
		    		     HealthPackage.Literals.EXERCISE_STATEMENT__TIME,
		    		     INVALID_TIME);
		    }
		}
	}
	
}
