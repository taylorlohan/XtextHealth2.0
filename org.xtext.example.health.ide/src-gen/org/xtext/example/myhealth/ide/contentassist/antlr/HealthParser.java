/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.myhealth.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.myhealth.ide.contentassist.antlr.internal.InternalHealthParser;
import org.xtext.example.myhealth.services.HealthGrammarAccess;

public class HealthParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HealthGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HealthGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getInputValueAccess().getAlternatives(), "rule__InputValue__Alternatives");
			builder.put(grammarAccess.getGenderAccess().getAlternatives(), "rule__Gender__Alternatives");
			builder.put(grammarAccess.getNutritionAccess().getAlternatives(), "rule__Nutrition__Alternatives");
			builder.put(grammarAccess.getAdviceTypeAccess().getAlternatives(), "rule__AdviceType__Alternatives");
			builder.put(grammarAccess.getExerciseTypeAccess().getAlternatives(), "rule__ExerciseType__Alternatives");
			builder.put(grammarAccess.getPeopleStatementAccess().getGroup(), "rule__PeopleStatement__Group__0");
			builder.put(grammarAccess.getHeightStatementAccess().getGroup(), "rule__HeightStatement__Group__0");
			builder.put(grammarAccess.getWeightStatementAccess().getGroup(), "rule__WeightStatement__Group__0");
			builder.put(grammarAccess.getAgeStatementAccess().getGroup(), "rule__AgeStatement__Group__0");
			builder.put(grammarAccess.getGenderStatementAccess().getGroup(), "rule__GenderStatement__Group__0");
			builder.put(grammarAccess.getIngestStatementAccess().getGroup(), "rule__IngestStatement__Group__0");
			builder.put(grammarAccess.getExerciseStatementAccess().getGroup(), "rule__ExerciseStatement__Group__0");
			builder.put(grammarAccess.getAdviceStatementAccess().getGroup(), "rule__AdviceStatement__Group__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getHealthProgramAccess().getStatementsAssignment(), "rule__HealthProgram__StatementsAssignment");
			builder.put(grammarAccess.getPeopleStatementAccess().getNameAssignment_3(), "rule__PeopleStatement__NameAssignment_3");
			builder.put(grammarAccess.getHeightStatementAccess().getHeightAssignment_3(), "rule__HeightStatement__HeightAssignment_3");
			builder.put(grammarAccess.getWeightStatementAccess().getWeightAssignment_3(), "rule__WeightStatement__WeightAssignment_3");
			builder.put(grammarAccess.getAgeStatementAccess().getAgeAssignment_3(), "rule__AgeStatement__AgeAssignment_3");
			builder.put(grammarAccess.getGenderStatementAccess().getGenderAssignment_3(), "rule__GenderStatement__GenderAssignment_3");
			builder.put(grammarAccess.getIngestStatementAccess().getNutritiontypeAssignment_2(), "rule__IngestStatement__NutritiontypeAssignment_2");
			builder.put(grammarAccess.getIngestStatementAccess().getAmountAssignment_3(), "rule__IngestStatement__AmountAssignment_3");
			builder.put(grammarAccess.getExerciseStatementAccess().getExerciseTypeAssignment_1(), "rule__ExerciseStatement__ExerciseTypeAssignment_1");
			builder.put(grammarAccess.getExerciseStatementAccess().getTimeAssignment_3(), "rule__ExerciseStatement__TimeAssignment_3");
			builder.put(grammarAccess.getAdviceStatementAccess().getAdAssignment_4(), "rule__AdviceStatement__AdAssignment_4");
			builder.put(grammarAccess.getIntValueAccess().getValAssignment(), "rule__IntValue__ValAssignment");
			builder.put(grammarAccess.getRealValueAccess().getValAssignment(), "rule__RealValue__ValAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HealthGrammarAccess grammarAccess;

	@Override
	protected InternalHealthParser createParser() {
		InternalHealthParser result = new InternalHealthParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HealthGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HealthGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
